/*!
 * @brief This header file contains the declaration of class `registrationRecord`.
 */
#ifndef CS225_SP22_C1_REGISTRATIONRECORD_H_
#define CS225_SP22_C1_REGISTRATIONRECORD_H_
#include <string>
#include <map>
#include <vector>
#include <ctime>
#include <limits>
#include <iomanip>
#include "utilities.h"
#include "queue.h"
#include "queue.cpp"
#include "config.h"

/*!
 * @brief This class defines objects which holds our records containing patient information.
 */
class RegistrationRecord {
private:
    // Fields (generated from input).
    int id_;
    std::string name_;
    std::string address_;
    std::string phone_;
    std::string wechat_;
    std::string email_;
    int profession_id_;
    time_t birthday_;
    int risk_status_;
    int local_queue_id_;

    // Fields (autogenerated).
    int extension_{};
    time_t timestamp_{};
    int age_id_{}; // Starts from 1.
    bool treated_{false};
    time_t treat_time_{};
    int treat_loc_id_{};
    int treat_slot_id_{};
    time_t final_time_{};

public:
    // Constructors and destructors.
    RegistrationRecord() = default;  // No-args constructor explicitly deleted.
    explicit RegistrationRecord(const CSVRow& recordInfo);
    explicit RegistrationRecord(const std::vector<std::string>& recordInfo);
    RegistrationRecord(const RegistrationRecord& registration_record) = default;  // Copy constructor.
    RegistrationRecord& operator=(const RegistrationRecord& registration_record) = default;  // Copy assignment operator.
    RegistrationRecord(RegistrationRecord&& registration_record) noexcept = default;  // Move constructor.
    RegistrationRecord& operator=(RegistrationRecord&& registration_record) noexcept = default;  // Move assignment operator.
    virtual ~RegistrationRecord() = default;

    // Overloaded operators.
    friend std::ostream& operator<<(std::ostream& os, const RegistrationRecord& record);
    bool operator==(const RegistrationRecord& other) const;

    // Getters and setters.
    [[nodiscard]] int GetId() const;
    [[nodiscard]] const std::string& GetName() const;
    [[nodiscard]] int GetProfessionId() const;
    [[nodiscard]] int GetAgeId() const;
    [[nodiscard]] time_t GetTimestamp() const;
    [[nodiscard]] int GetExtension() const;
    [[nodiscard]] int GetRiskStatus() const;
    [[nodiscard]] int GetLocalQueueId() const;
    [[nodiscard]] int GetWaitingTime() const;
    [[nodiscard]] time_t GetTreatTime() const;
    [[nodiscard]] int GetTreatLocId() const;
    [[nodiscard]] int GetTreatSlotId() const;
    void SetProfessionId(int profession_id);
    void SetExtension(int extension);
    void SetRiskStatus(int risk_status);
    void SetTreatTime(time_t treat_time);
    void SetTreated(bool treated);
    void SetFinalWaitingTime(time_t final_waiting_time);
    void SetTreatLocId(int treat_loc_id);
    void SetTreatSlotId(int treat_slot_id);
    void updateExtension();
    void applyPenalty();

private:
    // Private helper functions.
    void setAgeCategory();
    static std::string displayAgeCategory(const RegistrationRecord& record);
    static std::string displayProfessionCategory(const RegistrationRecord& record);
};

/*!
 * @brief We now inject our customized specialization of `std::hash` and `std::less`
 * for class `RegistrationRecord` into namespace `std`.
 */
namespace std {

template<>  // Transparent template parameter.
struct less<RegistrationRecord> {
    bool operator()(const RegistrationRecord& lhs, const RegistrationRecord& rhs) const noexcept {
        if (lhs.GetProfessionId() != rhs.GetProfessionId()) {
            return lhs.GetProfessionId() < rhs.GetProfessionId();
        }
        if (lhs.GetAgeId() != rhs.GetAgeId()) {
            return lhs.GetAgeId() < rhs.GetAgeId();
        }
        return lhs.GetTimestamp() < lhs.GetTimestamp();
    }
};

template<>
struct hash<RegistrationRecord> {
    std::size_t operator()(const RegistrationRecord& k) const noexcept {
        // Compute individual hash values and combine them using XOR
        // and bit shifting.
        std::size_t h1 = std::hash<int>{}(k.GetId());  // Overloaded () operator within a functor.
        std::size_t h2 = std::hash<std::string>{}(k.GetName());
        return h1 ^ (h2 << 1);
    }
};
}
#endif //CS225_SP22_C1_REGISTRATIONRECORD_H_
